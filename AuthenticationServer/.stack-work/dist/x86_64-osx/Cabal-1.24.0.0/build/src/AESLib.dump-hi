
==================== FINAL INTERFACE ====================
2017-02-09 18:16:47.114885 UTC

interface use-haskell-0.1.0.0-KgpYYOGnCH8DLkRVG5bRpc:AESLib 8001
  interface hash: 68b0bd6b3439c037b5dcf1738553cd0b
  ABI hash: e34878d070ca6782357a5adc88d74a0a
  export-list hash: 2e59129c55912164f452a47c0d3d572b
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b849377b70fac31bf01dcaf6d5be1aa9
  sig of: Nothing
  used TH splices: False
  where
exports:
  AESLib.decryption
  AESLib.encryption
  AESLib.keygenerator
module dependencies:
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
05895f2cdad0d1e3b0a7902f77f19d2f
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   AESLib.$trModule2
                   AESLib.$trModule1) -}
8e0f34f8c5bb3525a45de246d09dc517
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "AESLib"#) -}
9952d9b9a4d6789590efa8e5e814301c
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "use-haskell-0.1.0.0-KgpYYOGnCH8DLkRVG5bRpc"#) -}
bb7d7b07ff20d508886bc5a2f1026b39
  decryption :: a -> GHC.Base.String -> a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a (str :: a) (key :: GHC.Base.String) -> str) -}
d8e3c8388743c3e713cca616cf87ec48
  encryption :: a -> GHC.Base.String -> a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a (str :: a) (key :: GHC.Base.String) -> str) -}
59bd1c54b725e493c250bdd3fc31b913
  keygenerator :: (GHC.Base.String, GHC.Base.String)
  {- Strictness: m,
     Unfolding: ((AESLib.keygenerator2, AESLib.keygenerator1)) -}
c2324910b1268e5e4c5383372f677991
  keygenerator1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "tmp_pvk"#) -}
84caacbe800c35a17ed9128bc2934dcf
  keygenerator2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "tmp_pbk"#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

